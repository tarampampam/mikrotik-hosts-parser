# Documentation: <https://golangci-lint.run/usage/configuration/>

run:
  timeout: 1m
  skip-dirs:
    - .github
    - .git
  modules-download-mode: readonly
  allow-parallel-runners: true

output:
  format: colored-line-number # colored-line-number|line-number|json|tab|checkstyle|code-climate

linters-settings:
  govet:
    check-shadowing: true
    enable-all: true
  golint:
    min-confidence: 0.3
  gocyclo:
    min-complexity: 15
  godot:
    scope: declarations # declarations|toplevel|all
    capital: true
  dupl:
    threshold: 100
  goconst:
    min-len: 2
    min-occurrences: 3
  misspell:
    locale: US
  lll:
    line-length: 120
  maligned:
    suggest-new: true
  prealloc:
    simple: true
    range-loops: true
    for-loops: true
  nolintlint:
    allow-leading-space: false
    require-specific: true

linters: # All available linters list: <https://golangci-lint.run/usage/linters/>
  disable-all: true
  enable:
    - asciicheck # Simple linter to check that your code does not contain non-ASCII identifiers
    - bodyclose # Checks whether HTTP response body is closed successfully
    - deadcode # Finds unused code
    - depguard # Go linter that checks if package imports are in a list of acceptable packages
    - dogsled # Checks assignments with too many blank identifiers (e.g. x, _, _, _, := f())
    - dupl # Tool for code clone detection
    - errcheck # Errcheck is a program for checking for unchecked errors in go programs. These unchecked errors can be critical bugs in some cases
    - errorlint # find code that will cause problems with the error wrapping scheme introduced in Go 1.13
    - exhaustive # check exhaustiveness of enum switch statements
    #- exhaustivestruct # Checks if all struct's fields are initialized
    - exportloopref # checks for pointers to enclosing loop variables
    - funlen # Tool for detection of long functions
    #- gci # Gci control golang package import order and make it always deterministic
    - gochecknoglobals # Checks that no globals are present in Go code
    - gochecknoinits # Checks that no init functions are present in Go code
    - gocognit # Computes and checks the cognitive complexity of functions
    - goconst # Finds repeated strings that could be replaced by a constant
    - gocritic # The most opinionated Go source code linter
    - gocyclo # Computes and checks the cyclomatic complexity of functions
    - godox # Tool for detection of FIXME, TODO and other comment keywords
    #- goerr113 # Golang linter to check the errors handling expressions
    - gofmt # Gofmt checks whether code was gofmt-ed. By default this tool runs with -s option to check for code simplification
    #- gofumpt # Gofumpt checks whether code was gofumpt-ed
    #- goheader # Checks is file header matches to pattern
    - goimports # Goimports does everything that gofmt does. Additionally it checks unused imports
    - golint # Golint differs from gofmt. Gofmt reformats Go source code, whereas golint prints out style mistakes
    - gomnd # An analyzer to detect magic numbers
    #- gomodguard # Allow and block list linter for direct Go module dependencies
    - goprintffuncname # Checks that printf-like functions are named with `f` at the end
    - gosec # Inspects source code for security problems
    - gosimple # Linter for Go source code that specializes in simplifying a code
    - govet # Vet examines Go source code and reports suspicious constructs, such as Printf calls whose arguments do not align with the format string
    - ineffassign # Detects when assignments to existing variables are not used
    - interfacer # Linter that suggests narrower interface types
    - lll # Reports long lines
    - maligned # Tool to detect Go structs that would take less memory if their fields were sorted
    - misspell # Finds commonly misspelled English words in comments
    - nakedret # Finds naked returns in functions greater than a specified function length
    - nestif # Reports deeply nested if statements
    - nlreturn # checks for a new line before return and branch statements to increase code clarity
    - noctx # finds sending http request without context.Context
    - nolintlint # Reports ill-formed or insufficient nolint directives
    #- paralleltest # detects missing usage of t.Parallel() method in your Go test
    - prealloc # Finds slice declarations that could potentially be preallocated
    - rowserrcheck # Checks whether Err of rows is checked successfully
    - scopelint # Scopelint checks for unpinned variables in go programs
    #- sqlclosecheck # Checks that sql.Rows and sql.Stmt are closed
    - staticcheck # Staticcheck is a go vet on steroids, applying a ton of static analysis checks
    - structcheck # Finds unused struct fields
    - stylecheck # Stylecheck is a replacement for golint
    #- testpackage # linter that makes you use a separate _test package
    - tparallel # detects inappropriate usage of t.Parallel() method in your Go test codes
    - typecheck # Like the front-end of a Go compiler, parses and type-checks Go code
    - unconvert # Remove unnecessary type conversions
    - unparam # Reports unused function parameters
    - unused # Checks Go code for unused constants, variables, functions and types
    - varcheck # Finds unused global variables and constants
    - whitespace # Tool for detection of leading and trailing whitespace
    #- wrapcheck # Checks that errors returned from external packages are wrapped
    - wsl # Whitespace Linter - Forces you to use empty lines!
    - godot # Check if comments end in a period

issues:
  exclude-use-default: false
  exclude:
    # EXC0001 errcheck: Almost all programs ignore errors on these functions and in most cases it's ok
    - Error return value of .((os\.)?std(out|err)\..*|.*Close|.*Flush|os\.Remove(All)?|.*print(f|ln)?|os\.(Un)?Setenv). is not checked
    # EXC0003 golint: False positive when tests are defined in package 'test'
    #- func name will be used as test\.Test.* by other packages, and that stutters; consider calling this
    # EXC0006 gosec: Too many false-positives on 'unsafe' usage
    - Use of unsafe calls should be audited
    # EXC0007 gosec: Too many false-positives for parametrized shell calls
    - Subprocess launch(ed with variable|ing should be audited)
    # EXC0008 gosec: Duplicated errcheck checks
    - (G104|G307)
    # EXC0009 gosec: Too many issues in popular repos
    - (Expect directory permissions to be 0750 or less|Expect file permissions to be 0600 or less)
    # EXC0010 gosec: False positive is triggered by 'src, err := ioutil.ReadFile(filename)'
    - Potential file inclusion via variable
  max-same-issues: 0 # Maximum count of issues with the same text. Set to 0 to disable. Default is 3
  exclude-rules:
    - path: _test\.go
      linters:
        - funlen
        - gocognit
        - noctx
