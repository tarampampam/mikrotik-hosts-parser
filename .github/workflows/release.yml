name: release

on:
  release: # Docs: <https://help.github.com/en/articles/events-that-trigger-workflows#release-event-release>
    types: [published]

jobs:
  build:
    name: Build for ${{ matrix.os }} (${{ matrix.arch }})
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        os: [linux, windows, darwin]
        arch: [amd64]
        include:
          - os: linux
            arch: 386
          - os: windows
            arch: 386
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16.7

      - name: Check out code
        uses: actions/checkout@v2

      - name: Generate builder values
        id: values
        run: |
          echo "::set-output name=version::`echo ${GITHUB_REF##*/} | sed -e 's/^[vV ]*//'`"
          echo "::set-output name=binary-name::mikrotik-hosts-parser-${{ matrix.os }}-${{ matrix.arch }}`[ ${{ matrix.os }} = 'windows' ] && echo '.exe'`"

      - name: Install Go dependencies
        run: go mod download

      - name: Build application
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 0
          LDFLAGS: -s -w -X github.com/tarampampam/mikrotik-hosts-parser/v4/internal/pkg/version.version=${{ steps.values.outputs.version }}
        run: go build -trimpath -ldflags "$LDFLAGS" -o "./${{ steps.values.outputs.binary-name }}" ./cmd/mikrotik-hosts-parser/

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ steps.values.outputs.binary-name }}
          asset_name: ${{ steps.values.outputs.binary-name }}
          tag: ${{ github.ref }}

  docker-image:
    name: Build docker image
    runs-on: ubuntu-20.04
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1 # Action page: <https://github.com/docker/setup-qemu-action>

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1 # Action page: <https://github.com/docker/setup-buildx-action>

      - name: Login to default Container Registry
        uses: docker/login-action@v1 # Action page: <https://github.com/docker/login-action>
        with:
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1 # Action page: <https://github.com/docker/login-action>
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PASSWORD }}

      - name: Generate builder values
        id: values
        run: echo "::set-output name=version::`echo ${GITHUB_REF##*/} | sed -e 's/^[vV ]*//'`"

      - name: Build image
        run: |
          docker buildx build \
            --platform "linux/amd64,linux/386,linux/arm64,linux/arm/v6,linux/arm/v7" \
            --tag "tarampampam/mikrotik-hosts-parser:${{ steps.values.outputs.version }}" \
            --tag "tarampampam/mikrotik-hosts-parser:latest" \
            --tag "ghcr.io/${{ github.actor }}/mikrotik-hosts-parser:${{ steps.values.outputs.version }}" \
            --tag "ghcr.io/${{ github.actor }}/mikrotik-hosts-parser:latest" \
            --build-arg "APP_VERSION=${{ steps.values.outputs.version }}" \
            --file ./Dockerfile \
            --push \
            .
