name: tests

on:
  push:
    branches:
      - master
    tags-ignore:
      - '**'
  pull_request:

jobs:
  golangci-lint:
    name: Golang-CI (lint)
    runs-on: ubuntu-20.04
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Run linter
        uses: golangci/golangci-lint-action@v2 # Action page: <https://github.com/golangci/golangci-lint-action>
        with:
          version: v1.33 # without patch version
          only-new-issues: false # show only new issues if it's a pull request

  gitleaks:
    name: Gitleaks
    runs-on: ubuntu-20.04
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Check for GitLeaks
        uses: zricethezav/gitleaks-action@v1.2.0 # Action page: <https://github.com/zricethezav/gitleaks-action>

  go-test:
    name: Unit tests
    runs-on: ubuntu-20.04
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.15

      - name: Check out code
        uses: actions/checkout@v2

      - name: Go modules Cache # Docs: <https://git.io/JfAKn#go---modules>
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Install Go dependencies
        run: go mod download

      - name: Run Unit tests
        run: go test -race -covermode=atomic -coverprofile /tmp/coverage.txt ./...

      - name: Upload Coverage report to CodeCov
        continue-on-error: true
        uses: codecov/codecov-action@v1 # https://github.com/codecov/codecov-action
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: /tmp/coverage.txt

  build:
    name: Build for ${{ matrix.os }} (${{ matrix.arch }})
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        os: [linux, windows, darwin] # linux, freebsd, darwin, windows
        arch: [amd64]                # amd64, 386
        include:
          - os: linux
            arch: 386
          - os: windows
            arch: 386
    needs: [golangci-lint, go-test]
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.15

      - name: Check out code
        uses: actions/checkout@v2

      - name: Generate version value
        id: version # for PR this value will be `merge@__hash__`, SO: <https://stackoverflow.com/a/59780579/2252921>
        run: echo "::set-output name=value::`echo ${GITHUB_REF##*/} | sed -e 's/^[vV ]*//'`@`echo ${GITHUB_SHA} | cut -c1-8`"

      - name: Go modules Cache # Docs: <https://git.io/JfAKn#go---modules>
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Install Go dependencies
        run: go mod download

      - name: Build application
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 0
          LDFLAGS: -s -w -X github.com/tarampampam/mikrotik-hosts-parser/internal/pkg/version.version=${{ steps.version.outputs.value }}
        run: go build -trimpath -ldflags "$LDFLAGS" -o /tmp/mikrotik-hosts-parser ./cmd/mikrotik-hosts-parser/

      - name: Try to execute
        if: matrix.os == 'linux'
        run: /tmp/mikrotik-hosts-parser version && /tmp/mikrotik-hosts-parser -h

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: mikrotik-hosts-parser-${{ matrix.os }}-${{ matrix.arch }}
          path: /tmp/mikrotik-hosts-parser
          if-no-files-found: error
          retention-days: 7

  e2e:
    name: End-to-End tests (cache in ${{ matrix.caching-engine }})
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        caching-engine: [memory, redis]
    needs: [build]
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Start redis server
        if: matrix.caching-engine == 'redis'
        run: docker run --rm -d -p "6379:6379/tcp" redis:6.0.9-alpine

      - name: Download compiled binary file
        uses: actions/download-artifact@v2
        with:
          name: mikrotik-hosts-parser-linux-amd64
          path: .artifact

      - name: Prepare binary file to run
        working-directory: .artifact
        run: mv ./mikrotik-hosts-parser ./../app && chmod +x ./../app

      - name: Start HTTP server
        run: ./app serve --debug --port 8081 --caching-engine "${{ matrix.caching-engine }}" --redis-dsn "redis://127.0.0.1:6379/0" &

      - name: Run Newman
        uses: ./.github/actions/newman
        with:
          baseurl: 'http://127.0.0.1:8081'

  docker-image:
    name: Build docker image
    runs-on: ubuntu-20.04
    needs: [golangci-lint, go-test]
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Generate version value
        id: version # for PR this value will be `merge@__hash__`, SO: <https://stackoverflow.com/a/59780579/2252921>
        run: echo "::set-output name=value::`echo ${GITHUB_REF##*/} | sed -e 's/^[vV ]*//'`@`echo ${GITHUB_SHA} | cut -c1-8`"

      - name: Build image
        run: docker build -t mikrotik-hosts-parser:local --build-arg "APP_VERSION=${{ steps.version.outputs.value }}" -f ./Dockerfile .

      - name: Try to execute
        run: docker run --rm mikrotik-hosts-parser:local version

      - name: Scan image
        uses: anchore/scan-action@v2 # action page: <https://github.com/anchore/scan-action>
        with:
          image: mikrotik-hosts-parser:local
          fail-build: true
          severity-cutoff: low # negligible, low, medium, high or critical

      - name: Save docker image
        run: docker save mikrotik-hosts-parser:local > ./docker-image.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: docker-image
          path: ./docker-image.tar

  docker-image-e2e:
    name: Docker image End-to-End tests (cache in ${{ matrix.caching-engine }})
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        caching-engine: [memory, redis]
    needs: [docker-image]
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Create docker network
        run: docker network create "app-network"

      - name: Start redis server
        if: matrix.caching-engine == 'redis'
        run: docker run --rm -d --network "app-network" -p "6379:6379/tcp" --name=redis redis:6.0.9-alpine

      - name: Download builded docker image
        uses: actions/download-artifact@v2
        with:
          name: docker-image
          path: .artifact

      - name: Prepare image to run
        working-directory: .artifact
        run: docker load < docker-image.tar

      - name: Run docker image with app
        run: |
          docker run --rm -d \
            --network "app-network" \
            -p "8081:8081/tcp" \
            -e "CACHING_ENGINE=${{ matrix.caching-engine }}" \
            -e "REDIS_DSN=redis://redis:6379/0" \
            -e "LISTEN_PORT=8081" \
              mikrotik-hosts-parser:local

      - name: Run Newman
        uses: ./.github/actions/newman
        with:
          baseurl: 'http://127.0.0.1:8081'
